#!/bin/sh

# dependencies: grep sed curl video_player
# video_player ( needs to be able to play urls )
player_fn="mpv"

prog="ani-rofi"
logfile="${XDG_CACHE_HOME:-$HOME/.cache}/ani-hsts"

help_text () {
	while IFS= read line; do
		printf "%s\n" "$line"
	done <<-EOF
	USAGE: $prog <query>
	 -h	 show this help text
	 -d	 download episode
	 -H	 continue where you left off
	 -q	 set video quality (best/worst/360/480/720/..)
	EOF
}


die () {
	rofi -e "$*" >&2
	exit 1
}

err () {
	rofi -e "$*" >&2
}

search_anime () {
	# get anime name along with its id
	search=$(printf '%s' "$1" | tr ' ' '-' )
	titlepattern='<a href="/category/'

	curl -s "https://gogoanime.pe//search.html" \
		-G \
		-d "keyword=$search" |
	sed -n -E '
		s_^[[:space:]]*<a href="/category/([^"]*)" title="([^"]*)".*_\1_p
		'
}

search_eps () {
	# get available episodes for anime_id
	anime_id=$1

	curl -s "https://gogoanime.pe/category/$anime_id" |
	sed -n -E '
		/^[[:space:]]*<a href="#" class="active" ep_start/{
		s/.* '\''([0-9]*)'\'' ep_end = '\''([0-9]*)'\''.*/\2/p
		q
		}
		'
}

get_embedded_video_link() {
	# get the download page url
	anime_id=$1
	ep_no=$2

	# credits to fork: https://github.com/Dink4n/ani-cli for the fix
	curl -s "https://gogoanime.pe/$anime_id-episode-$ep_no" |
	sed -n -E '
		/^[[:space:]]*<a href="#" rel="100"/{
		s/.*data-video="([^"]*)".*/https:\1/p
		q
		}'
}

get_video_quality() {
	embedded_video_url=$1
	video_url=$2

	video_file=$(curl -s --referer "$embedded_video_url" "$video_url")
	available_qualities=$(printf '%s' "$video_file" | sed -n -E 's/.*NAME="([^p]*)p"/\1/p')
	case $quality in
		best)
			printf '%s' "$available_qualities" | tail -n 1
			;;

		worst)
			printf '%s' "$available_qualities" | head -n 1
			;;

		*)
			is_quality_avail=$(printf '%s' "$available_qualities" | grep "$quality")
			video_quality="$quality"
			if [ -z "$is_quality_avail" ]; then
				printf "$c_red%s$c_reset\n" "Current video quality is not available (defaulting to highest quality)" >&2
				quality=best
				video_quality=$(printf '%s' "$available_qualities" | tail -n 1)
			fi
			printf '%s' "$video_quality"
			;;
	esac

}

get_links () {
	embedded_video_url="$1"
	video_url=$(curl -s "$embedded_video_url" |
	sed -n -E '
		/^[[:space:]]*sources:/{
		s/.*(https[^'\'']*).*/\1/p
		q
		}
		')

	video_quality=$(get_video_quality "$embedded_video_url" "$video_url")

	# Replace the video with highest quality video
	printf '%s' "$video_url" | sed -n -E "s/(.*)\.m3u8/\1.$video_quality.m3u8/p"
}

dep_ch () {
	for dep; do
		if ! command -v "$dep" >/dev/null ; then
			die "Program \"$dep\" not found. Please install it."
		fi
	done
}

# get query
get_search_query () {
	if [ -z "$*" ]; then
		query=$(cat $logfile | sed 's/\s.*$//' | rofi -dmenu -mesg "Search Anime: ")
	else
		query=$*
	fi
}

# create history file
[ -f "$logfile" ] || : > "$logfile"

#####################
## Anime selection ##
#####################

anime_selection () {
	search_results=$*

	count=1
	results=""
	while read anime_id; do
		results="${results}$count - $anime_id\n"
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	# User input
	choice=$( printf "$results" | head -n -1 | rofi -dmenu -auto-select -mesg "Choose anime")
	choice=${choice%%[[:space:]]*}

	# Check if input is a number
	[ "$choice" -eq "$choice" ] 2>/dev/null || die "Invalid number entered"

	# Select respective anime_id
	count=1
	while read anime_id; do
		if [ $count -eq $choice ]; then
			selection_id=$anime_id
			break
		fi
		count=$((count+1))
	done <<-EOF
	$search_results
	EOF

	[ -z "$selection_id" ] && die "Invalid number entered"

	read last_ep_number <<-EOF
	$(search_eps "$selection_id")
	EOF
}

##################
## Ep selection ##
##################

episode_selection () {

	message="Choose episode"
	[ $is_download -eq 1 ] &&
		message="Choose starting and finishing episodes" &&
		multi="-multi-select"
	
	default="0"
	[ "$(grep "${selection_id}" "$logfile")" != "" ] &&
		default=$(sed -n -E "s/${selection_id}\t//p" "$logfile") 
	
	selected=$(seq $last_ep_number | rofi -dmenu $multi -auto-select -selected-row $default -mesg "$message")
	ep_choice_start="${selected%% *}"
	ep_choice_end=$(echo $selected | cut -d\  -f2)
	
}

open_episode () {
	anime_id=$1
	episode=$2

	embedded_video_url=$(get_embedded_video_link "$anime_id" "$episode")
	video_url=$(get_links "$embedded_video_url")

	case $video_url in
		*streamtape*)
			# If direct download not available then scrape streamtape.com
			BROWSER=${BROWSER:-firefox}
			printf "scraping streamtape.com\n"
			video_url=$(curl -s "$video_url" | sed -n -E '
				/^<script>document/{
				s/^[^"]*"([^"]*)" \+ '\''([^'\'']*).*/https:\1\2\&dl=1/p
				q
				}
			');;
	esac

	if [ $is_download -eq 0 ]; then
		# write anime and episode number
		sed -E "
			s/^${selection_id}\t[0-9]+/${selection_id}\t$((episode+1))/
		" "$logfile" > "${logfile}.new" && mv "${logfile}.new" "$logfile"

		setsid -f $player_fn --http-header-fields="Referer: $embedded_video_url" "$video_url" >/dev/null 2>&1
	else
		printf "Downloading episode $episode ...\n"
		printf "%s\n" "$video_url"
		# add 0 padding to the episode name
		episode=$(printf "%03d" $episode)
		{
			curl -L -# -C - "$video_url" -G -e 'https://streamani.io/' \
				-o "${anime_id}-${episode}.mp4" "$video_url" >/dev/null 2>&1 &&
				printf "${c_green}Downloaded episode: %s${c_reset}\n" "$episode" ||
				printf "${c_red}Download failed episode: %s${c_reset}\n" "$episode"
		}
	fi
}

############
# Start Up #
############

# to clear the colors when exited using SIGINT

dep_ch "$player_fn" "curl" "sed" "grep"

# option parsing
is_download=0
quality=best
scrape=query
while getopts 'hdHq:' OPT; do
	case $OPT in
		h)
			help_text
			exit 0
			;;
		d)
			is_download=1
			;;
		H)
			scrape=history
			;;
		q)
			quality=$OPTARG
			;;
	esac
done
shift $((OPTIND - 1))

########
# main #
########

case $scrape in
	query)
		get_search_query "$*"
		search_results=$(search_anime "$query")
		[ -z "$search_results" ] && die "No search results found"
		anime_selection "$search_results"
		episode_selection
		;;
	history)
		search_results=$(sed -n -E 's/\t[0-9]*//p' "$logfile")
		[ -z "$search_results" ] && die "History is empty"
		anime_selection "$search_results"
		ep_choice_start=$(sed -n -E "s/${selection_id}\t//p" "$logfile")
		;;
esac

{ # checking input
	[ "$ep_choice_start" -eq "$ep_choice_start" ] 2>/dev/null || die "Invalid number entered"
	episodes=$ep_choice_start

	if [ -n "$ep_choice_end" ]; then
		[ "$ep_choice_end" -eq "$ep_choice_end" ] 2>/dev/null || die "Invalid number entered"
		# create list of episodes to download/watch
		episodes=$(seq $ep_choice_start $ep_choice_end)
	fi
}

# add anime to history file
grep -q -w "${selection_id}" "$logfile" ||
	printf "%s\t%d\n" "$selection_id" $((episode+1)) >> "$logfile"

for ep in $episodes
do
	open_episode "$selection_id" "$ep"
done
episode=${ep_choice_end:-$ep_choice_start}
